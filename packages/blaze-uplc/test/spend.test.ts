import {
  HexBlob,
  PlutusData,
  PlutusList,
  fromHex,
  toHex,
} from "@blaze-cardano/core";
import { applyParams } from "../src/index";
import { apply_params_to_script } from "uplc-node";
import { UPLCDecoder } from "../src/decoder";
import { UPLCEncoder } from "../src/encoder";

describe("Script Deserialisation", () => {
  it("Should be able to parse the spec example", () => {
    const spend = "0500023371C911071A5F783625EE8C004838B40181".toLowerCase();
    const AST = UPLCDecoder.decodeFromHex(spend);
    expect(AST).toBeTruthy();
  });

  it("Should be able to parse the spec example", () => {
    const spend = "010000480081".toLowerCase();
    const AST = UPLCDecoder.decodeFromHex(spend);
    expect(AST).toBeTruthy();
  });

  it("Should be able to parse the optimised spend validator", () => {
    const spend =
      "01000032323232322222323330010010053756601260146014601460146014601460106EA8C024C020DD5001111299980419BAF3009300B00100214984CCC00C00C008C0300055CD2AB9D5573CAE855D11".toLowerCase();
    const AST = UPLCDecoder.decodeFromHex(spend);
    expect(AST).toBeTruthy();
  });

  it("Should be able to parse a v3 script", () => {
    const helloWorld =
      "0101003232323232323225333002323232323253330073370e900118041baa0011323232533300a3370e900018059baa005132533300e0011613253333330120011616161613253330103012003132533300e3370e900018079baa005132533300f002100114a06644646600200200644a66602a00229404c94ccc04ccdc79bae301700200414a2266006006002602e0026eb0c048c04cc04cc04cc04cc04cc04cc04cc04cc040dd50059bae301230103754602460206ea801458cdc79bae3011300f375401091010d48656c6c6f2c20576f726c64210016375c002601e00260186ea801458c034c038008c030004c024dd50008b1805180580118048009804801180380098021baa00114984d9595cd2ab9d5573caae7d5d0aba25749";
    const AST = UPLCDecoder.decodeFromHex(helloWorld);
    expect(AST).toBeTruthy();
    expect(AST.version).toBe("1.1.0");
  });
});

const roundTrips = [
  "010000480081",
  "0500023371C911071A5F783625EE8C004838B40181",
  "01000032323232322222323330010010053756601260146014601460146014601460106EA8C024C020DD5001111299980419BAF3009300B00100214984CCC00C00C008C0300055CD2AB9D5573CAE855D11",

  "010100229800aba2aba1aab9faab9eaab9dab9a48888896600264653001300700198039804000cc01c0092225980099b8748008c01cdd500144ca60026016003300b300c00198041baa0048a51488896600266e1d20000028acc004c034dd500440062c80722b30013370e90010014566002601a6ea802200316403915980099b874801000a2b3001300d37540110018b201c8acc004cdc3a400c00515980098069baa008800c5900e456600266e1d20080028acc004c034dd500440062c80722c805900b2016402c805860106ea800a29410060c01c004c00cdd5003c52689b2b200201",
];

describe("Decode . Encode = Identity", () => {
  it("Should be able to decode and invert the roundtrip example", () => {
    for (const rtExample of roundTrips) {
      const AST = UPLCDecoder.decodeFromHex(rtExample);
      const reencoded = new UPLCEncoder().encodeProgram(AST);
      expect(toHex(reencoded).toUpperCase()).toBe(rtExample.toUpperCase());
      expect(toHex(reencoded).length).toBe(rtExample.length);
    }
  });
});

describe("Apply params", () => {
  it("Should be able to apply parameters to a script", () => {
    const script = HexBlob(
      "5866010000323232323232223222533300632330010013756601660186018601860186018601860126ea8c02cc024dd50011129998058008a5013253330093375e0106014601a00429444cc00c00c004c03400452613656375a002ae6955ceaab9e5573eae855d11",
    );
    const params = [
      PlutusData.newBytes(fromHex("abcdef")),
      PlutusData.newInteger(BigInt(123)),
    ];
    const paramsList = new PlutusList();
    params.forEach((x) => paramsList.add(x));
    const aikenApply = apply_params_to_script(
      fromHex(paramsList.toCbor()),
      fromHex(script),
    );
    const blazeApply = applyParams(script, ...params);
    expect(toHex(aikenApply).toUpperCase()).toBe(blazeApply.toUpperCase());
  });
});

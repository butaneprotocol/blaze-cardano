import {
  Address,
  AuxiliaryData,
  Datum,
  DatumHash,
  hardCodedProtocolParams,
  HexBlob,
  NetworkId,
  Slot,
  RewardAccount,
  PlutusData,
  PlutusV2Script,
  Script,
  TransactionId,
  TransactionInput,
  TransactionOutput,
  TransactionUnspentOutput,
  Value,
  PlutusV1Script,
  Metadatum,
  Metadata,
  Ed25519KeyHashHex,
  Credential,
  CredentialType,
  PaymentAddress,
  Transaction,
  TxCBOR,
} from "@blaze-cardano/core";
import { makeUplcEvaluator } from "@blaze-cardano/vm";
import * as value from "../../src/value";
import { TxBuilder } from "../../src/TxBuilder";
import { Data } from "../../src";

function flatten<U>(iterator: IterableIterator<U> | undefined): U[] {
  if (!iterator) {
    return [];
  }
  const result: U[] = [];
  for (const item of iterator) {
    result.push(item);
  }
  return result;
}

const ASSETS = Array.from({ length: 1200 }, (_, i) =>
  i
    .toString(16)
    .padStart(2, "0")
    .concat("ef".repeat(56 / 2))
);

describe("Transaction Building", () => {
  it("A complex transaction should balance correctly", async () => {
    const ASSET_NAME_1 = ASSETS[0]!;
    const ASSET_NAME_2 = ASSETS[1]!;
    // $hosky
    const testAddress = Address.fromBech32(
      "addr1q86ylp637q7hv7a9r387nz8d9zdhem2v06pjyg75fvcmen3rg8t4q3f80r56p93xqzhcup0w7e5heq7lnayjzqau3dfs7yrls5"
    );
    const utxos = [
      new TransactionUnspentOutput(
        new TransactionInput(TransactionId("0".repeat(64)), 0n),
        new TransactionOutput(
          testAddress,
          value.makeValue(50_000_000n, [ASSET_NAME_1, 1n], [ASSET_NAME_2, 1n])
        )
      ),
      new TransactionUnspentOutput(
        new TransactionInput(TransactionId("1".padStart(64, "0")), 0n),
        new TransactionOutput(
          testAddress,
          value.makeValue(40_000_000n, [ASSET_NAME_1, 1n], [ASSET_NAME_2, 1n])
        )
      ),
    ];
    const tx = await new TxBuilder(hardCodedProtocolParams)
      .addUnspentOutputs(utxos)
      .setNetworkId(NetworkId.Testnet)
      .setChangeAddress(testAddress)
      .payAssets(testAddress, value.makeValue(48_708_900n, [ASSET_NAME_1, 1n]))
      .complete();

    const inputValue =
      // value.merge(
      tx
        .body()
        .inputs()
        .values()
        .map((x) =>
          utxos
            .find((y) => y.input().toCbor() == x.toCbor())!
            .output()
            .amount()
        )
        .reduce(value.merge, value.zero());
    //   ,new Value(
    //     flatten(tx.body().withdrawals()?.values()).reduce((x, y) => x + y, 0n),
    //   ),
    // )

    const outputValue = value.merge(
      flatten(tx.body().outputs().values())
        .map((x) => x.amount())
        .reduce(value.merge, value.zero()),
      new Value(tx.body().fee())
    );

    // console.log("Change: ", tx.body().outputs().at(1)?.amount().coin());

    // console.dir(inputValue.toCore(), { depth: null });
    // console.dir(outputValue.toCore(), { depth: null });

    // console.dir(tx.toCore(), {depth: null})
    expect(inputValue.toCbor()).toEqual(outputValue.toCbor());
  });

  it("Should correctly balance change for a really big output change", async () => {
    // $hosky
    const testAddress = Address.fromBech32(
      "addr1q86ylp637q7hv7a9r387nz8d9zdhem2v06pjyg75fvcmen3rg8t4q3f80r56p93xqzhcup0w7e5heq7lnayjzqau3dfs7yrls5"
    );
    const utxo1Assets: [string, bigint][] = ASSETS.slice(
      0,
      ASSETS.length / 2
    ).map((x) => [x, 1n]);
    const utxo2Assets: [string, bigint][] = ASSETS.slice(ASSETS.length / 2).map(
      (x) => [x, 1n]
    );
    const utxos = [
      new TransactionUnspentOutput(
        new TransactionInput(TransactionId("0".repeat(64)), 0n),
        new TransactionOutput(
          testAddress,
          value.makeValue(10_000_000_000n, ...utxo1Assets)
        )
      ),
      new TransactionUnspentOutput(
        new TransactionInput(TransactionId("1".padStart(64, "0")), 0n),
        new TransactionOutput(
          testAddress,
          value.makeValue(10_000_000_000n, ...utxo2Assets)
        )
      ),
    ];
    const tx = await new TxBuilder(hardCodedProtocolParams)
      .addUnspentOutputs(utxos)
      .setNetworkId(NetworkId.Testnet)
      .setChangeAddress(testAddress)
      .payAssets(
        testAddress,
        value.makeValue(10_001_000_000n, [ASSETS[0]!, 1n])
      )
      .complete();

    const inputValue =
      // value.merge(
      tx
        .body()
        .inputs()
        .values()
        .map((x) =>
          utxos
            .find((y) => {
              return y.input().toCbor() == x.toCbor();
            })!
            .output()
            .amount()
        )
        .reduce(value.merge, value.zero());
    //   ,new Value(
    //     flatten(tx.body().withdrawals()?.values()).reduce((x, y) => x + y, 0n),
    //   ),
    // )
    //

    const outputValue = value.merge(
      Array.from(tx.body().outputs().values())
        .map((x) => x.amount())
        .reduce(value.merge, value.zero()),
      new Value(tx.body().fee())
    );

    expect(tx.body().fee().toString()).toEqual("1992425");

    // console.log("Change: ", tx.body().outputs().at(1)?.amount().coin());

    // console.dir(inputValue.toCore(), { depth: null });
    // console.dir(outputValue.toCore(), { depth: null });

    expect(inputValue.multiasset()?.size).toEqual(
      outputValue.multiasset()?.size
    );
    expect(inputValue.toCbor()).toEqual(outputValue.toCbor());
  });

  it("A transaction should always have some inputs", async () => {
    // $hosky
    const testAddress = Address.fromBech32(
      "addr1q86ylp637q7hv7a9r387nz8d9zdhem2v06pjyg75fvcmen3rg8t4q3f80r56p93xqzhcup0w7e5heq7lnayjzqau3dfs7yrls5"
    );
    const utxos = [
      new TransactionUnspentOutput(
        new TransactionInput(TransactionId("0".repeat(64)), 0n),
        new TransactionOutput(testAddress, value.makeValue(50_000_000n))
      ),
      new TransactionUnspentOutput(
        new TransactionInput(TransactionId("1".padStart(64, "0")), 0n),
        new TransactionOutput(testAddress, value.makeValue(40_000_000n))
      ),
    ];
    const tx = await new TxBuilder(hardCodedProtocolParams)
      .addUnspentOutputs(utxos)
      .setNetworkId(NetworkId.Testnet)
      .setChangeAddress(testAddress)
      .addWithdrawal(
        RewardAccount.fromCredential(
          testAddress.getProps().paymentPart!,
          NetworkId.Testnet
        ),
        100_000_000n
      )
      .payAssets(testAddress, value.makeValue(48_708_900n))
      .complete();

    const inputValue = value.merge(
      tx
        .body()
        .inputs()
        .values()
        .map((x) =>
          utxos
            .find((y) => y.input().toCbor() == x.toCbor())!
            .output()
            .amount()
        )
        .reduce(value.merge, value.zero()),
      value.makeValue(100_000_000n)
    );

    const outputValue = value.merge(
      flatten(tx.body().outputs().values())
        .map((x) => x.amount())
        .reduce(value.merge, value.zero()),
      new Value(tx.body().fee())
    );
    expect(inputValue.toCbor()).toEqual(outputValue.toCbor());
    expect(tx.body().inputs().values().length).toBeGreaterThan(0);
  });
  // The following test is based on the below transaction, which was a transaction built by JPG Store. It created a fee that was too small.
  // 84a90082825820db1c583fc6117b2370e4d11016a39b3e1f8352455b15bd07c6bf057e0a8e2dde008258203a6e908226c3e85d05c9ab76d38786ed7ba84cd920dd320baea85964e17d921c040185a30058393184cc25ea4c29951d40b443b95bbc5676bc425470f96376d1984af9ab2c967f4bd28944b06462e13c5e3f5d5fa6e03f8567569438cd833e6d011a00b6cce0028201d8185822582067f5229ae335a0f6331ee86b3b4a31c0c9bcdb41a591663acec78a0ab62be174825839011d1c186d5bc22eb56035c37e370f0dcc2c300e8e5f0fa46a6bfdda99a03de54eefd4acaf0e40dd1ca949fbcd2f6658f9703c8f59ca968a761a01c90030825839016a4ee8e9e3913b2952b6f69f667fdc47184f55dcb4f8c678cf59b9de591f2f3dae1f4c91c4edce5b26a93ac25b3f813e245ac19db95d90891a213436b0825839014e1cbebe49ccbb538fb58b29ba439cdb6c9ade5b10d1f201008e1f4d2f4f939101e76ba35586e8c3fd93a0334f74a11f36cf3a7df5411bb0821a0012050ca1581c40fa2aa67258b4ce7b5782f74831d46a84c59a0ff0c28262fab21728a14e436c61794e6174696f6e3337303101825839014e1cbebe49ccbb538fb58b29ba439cdb6c9ade5b10d1f201008e1f4d2f4f939101e76ba35586e8c3fd93a0334f74a11f36cf3a7df5411bb01a5293f64d021a00047313031a085de11e0b5820811d43a658e8157a12063822a0ce3e3eac4e26686aa19519c88e87ed4dfb46cb0d8182582069b685a7de3799cf778714ed2dee97dab7a983106caf75c9f752afc20399a29c0510825839014e1cbebe49ccbb538fb58b29ba439cdb6c9ade5b10d1f201008e1f4d2f4f939101e76ba35586e8c3fd93a0334f74a11f36cf3a7df5411bb01a00459ea3111a0006ac9d12818258201693c508b6132e89b932754d657d28b24068ff5ff1715fec36c010d4d6470b3d00a20481d8799f9fd8799fd8799fd8799f581c1d1c186d5bc22eb56035c37e370f0dcc2c300e8e5f0fa46a6bfdda99ffd8799fd8799fd8799f581ca03de54eefd4acaf0e40dd1ca949fbcd2f6658f9703c8f59ca968a76ffffffff1a01c90030ffd8799fd8799fd8799f581c6a4ee8e9e3913b2952b6f69f667fdc47184f55dcb4f8c678cf59b9deffd8799fd8799fd8799f581c591f2f3dae1f4c91c4edce5b26a93ac25b3f813e245ac19db95d9089ffffffff1a213436b0ffff581c6a4ee8e9e3913b2952b6f69f667fdc47184f55dcb4f8c678cf59b9deff0581840001d8799f00ff821a000326a91a04555e60f5f6
  it("Should calculate fee correctly running script", async () => {
    const outputAddress = Address.fromBech32(
      "addr1q98pe047f8xtk5u0kk9jnwjrnndkexk7tvgdruspqz8p7nf0f7fezq08dw34tphgc07e8gpnfa62z8ekeua8ma2prwcqzy3jhn"
    );
    const jpgAddress = Address.fromBech32(
      "addr1x8rjw3pawl0kelu4mj3c8x20fsczf5pl744s9mxz9v8n7efvjel5h55fgjcxgchp830r7h2l5msrlpt8262r3nvr8ekstg4qrx"
    );
    const inputAddress = Address.fromBech32(
      "addr1q98pe047f8xtk5u0kk9jnwjrnndkexk7tvgdruspqz8p7nf0f7fezq08dw34tphgc07e8gpnfa62z8ekeua8ma2prwcqzy3jhn"
    );

    const utxos = [
      new TransactionUnspentOutput(
        new TransactionInput(
          TransactionId(
            "3a6e908226c3e85d05c9ab76d38786ed7ba84cd920dd320baea85964e17d921c"
          ),
          4n
        ),

        new TransactionOutput(inputAddress, value.makeValue(1_984_573_620n))
      ),
    ];

    const refOutput = new TransactionOutput(
      Address.fromBech32(
        "addr1w8rjw3pawl0kelu4mj3c8x20fsczf5pl744s9mxz9v8n7eg0fcr8k"
      ),
      value.makeValue(8124350n)
    );

    const jpgAskScript = Script.newPlutusV2Script(
      PlutusV2Script.fromCbor(
        HexBlob(
          "59068959068601000032323232323232323232322223232533300a323232323232323232323232323232323232533301c3370e900000089919191919191919191919192999814002099b8848000ccc0040140180204c8c8c8c8c8c8c8c8c8c8c8c8c94ccc0e0c0ec0184c8c8c94ccc0ecc0f80084c8c8c8c94ccc0f14ccc0f14ccc0f0028402452808008a50100214a066e24040008cdc7802a44100375a60760046eb8c0e400458c0f0004dd5981c0011bae30360011630390053375e00c98150d8799fd87a9f581c84cc25ea4c29951d40b443b95bbc5676bc425470f96376d1984af9abffd8799fd8799fd87a9f581c2c967f4bd28944b06462e13c5e3f5d5fa6e03f8567569438cd833e6dffffffff003375e002024606c002606c0046eacc0d0004c0d0008c0c8004c0a8010cdc199b83337040029032240c4903219980180080426103d8798000302f006302d005222323232323232323253330323375e0020122646464646464a66607066ebc00c02c4c94ccc0f0c0fc0284c8c8c94ccc0fcc1080084c8c94ccc0f8cdc7802a45001533303e533303e3371200e002266e21200000714a026466e000200054ccc10402c5200013301801300b1616375a607e0046eb8c0f400458c100004dd5981e0011bae303a00116303d00916375a60780026078004607400260640046072016606e0142c606c002606c0046eacc0d0004c0d0008c0c8004c0a8008c0c4010c0bc00cc004004888c8c8c8c8c8c8c8c94ccc0c0cdd7800a6103d8798000132323232323253330363375e006016264a666074607a0142646464a66607a608000426464a66607866e3c015221001533303c533303c3371200e002266e21200000714a026466e000200054ccc0fc02c52000133301701701300b1616375a607a0046eb8c0ec00458c0f8004dd5981d0011bae303800116303b00916375a6074002607400460700026060004606e014606a0122c606800260680046eacc0c8004c0c8008c0c0004c0a0008c0bc00cc0b4008ccc8c0040048894ccc0a800852809919299981498018010a511333005005001003302e003375c605800497ae1011e581c15df89fe62968415bac4de9d8576da39c34db4717f46332572aca3eb00811e581c53391ebae9fa352a1108e2769df9baf0d3efcab0f49404bd6ac56bd400119805806800999919191800800911299981419b89480500044c8ccc010010004cdc080124028646464646464646464606e002606c002606a00260680026066002606400260620026060002605e002605c0042660080040026002002444a66604c66e1c0052000100213233300400400133702004900118160010090031bac3027001301f01832323374a9002198131ba90014bd701b94001376600260480026038a66603c66e1d2002301d011101116375a604400260340282660040086eb8cc060c06804d2002301a0133001001222533301f00214a026464a66603c66e3c00800c528899980280280080198118019bae30210023758603a002603a002603800260360026034002603200260300046eb0c058004c058004c054004c03000cc048004c048008c040004c02000c52616320053323232232533300e3370e9000000899191919299980a980c00109924c6600e0064649319299980a19b87480000044c8c8c8c94ccc06cc0780084c9263253330193370e9000000899191919299981018118010991924c64a66603e66e1d20000011323253330243027002132498c94ccc088cdc3a400000226464a66604e605400426493180d8008b181400098100010a99981119b87480080044c8c8c8c8c8c94ccc0acc0b800852616375a605800260580046eb4c0a8004c0a8008dd6981400098100010b18100008b1812800980e8018a99980f99b874800800454ccc088c07400c5261616301d00230140031630210013021002301f001301700416301700316375a60380026038004603400260240042c60240022c6eb8c058004c058008dd6180a00098060010b1806000980080091129998080010a4c264666008008602800600460026024004464a66601666e1d20000011323253330103013002149858dd7180880098048010a99980599b87480080044c8c94ccc040c04c00852616375c602200260120042c60120020086400664a66601266e1d200000113232533300e3011002149858dd6980780098038018a99980499b874800800454ccc030c01c00c5261616300700233001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d101"
        )
      )
    );

    refOutput.setScriptRef(jpgAskScript);

    const referenceInput: TransactionUnspentOutput =
      new TransactionUnspentOutput(
        new TransactionInput(
          TransactionId(
            "1693C508B6132E89B932754D657D28B24068FF5FF1715FEC36C010D4D6470B3D"
          ),
          0n
        ),
        refOutput
      );

    const params = { ...hardCodedProtocolParams };
    const jpgOutput = new TransactionOutput(
      jpgAddress,
      value.makeValue(1_327_480n, [
        "40fa2aa67258b4ce7b5782f74831d46a84c59a0ff0c28262fab21728436c61794e6174696f6e33373031",
        1n,
      ])
    );
    jpgOutput.setDatum(
      Datum.newDataHash(
        DatumHash(
          "9ef989c39ec7a452e68eaaa8c26c41cd0e7939909a3bff0ac823d3f22c7b0650"
        )
      )
    );
    const jpgUtxo = new TransactionUnspentOutput(
      new TransactionInput(
        TransactionId(
          "db1c583fc6117b2370e4d11016a39b3e1f8352455b15bd07c6bf057e0a8e2dde"
        ),
        0n
      ),

      jpgOutput
    );
    const redeemer = PlutusData.fromCbor(HexBlob("d8799f00ff"));
    const datum = PlutusData.fromCbor(
      HexBlob(
        "d8799f9fd8799fd8799fd8799f581c1d1c186d5bc22eb56035c37e370f0dcc2c300e8e5f0fa46a6bfdda99ffd8799fd8799fd8799f581ca03de54eefd4acaf0e40dd1ca949fbcd2f6658f9703c8f59ca968a76ffffffff1a01c90030ffd8799fd8799fd8799f581c6a4ee8e9e3913b2952b6f69f667fdc47184f55dcb4f8c678cf59b9deffd8799fd8799fd8799f581c591f2f3dae1f4c91c4edce5b26a93ac25b3f813e245ac19db95d9089ffffffff1a213436b0ffff581c6a4ee8e9e3913b2952b6f69f667fdc47184f55dcb4f8c678cf59b9deff"
      )
    );
    const collateralUtxo = new TransactionUnspentOutput(
      new TransactionInput(
        TransactionId(
          "69b685a7de3799cf778714ed2dee97dab7a983106caf75c9f752afc20399a29c"
        ),
        5n
      ),
      new TransactionOutput(inputAddress, value.makeValue(5_000_000n))
    );
    // This tx was built with base = 44
    if (params.minFeeReferenceScripts) params.minFeeReferenceScripts.base = 44;

    const tx = await new TxBuilder(hardCodedProtocolParams)
      .addUnspentOutputs(utxos)
      .provideCollateral([collateralUtxo])
      .useEvaluator(makeUplcEvaluator(params, 1, 1))
      .setChangeAddress(outputAddress)
      .setNetworkId(NetworkId.Mainnet)
      .addInput(jpgUtxo, redeemer, datum)
      .addReferenceInput(referenceInput)
      .setValidUntil(Slot(140370206))
      .lockAssets(
        Address.fromBech32(
          "addr1xxzvcf02fs5e282qk3pmjkau2emtcsj5wrukxak3np90n2evjel5h55fgjcxgchp830r7h2l5msrlpt8262r3nvr8eksg6pw3p"
        ),
        value.makeValue(11_980_000n),
        PlutusData.fromCbor(
          HexBlob(
            "582067f5229ae335a0f6331ee86b3b4a31c0c9bcdb41a591663acec78a0ab62be174"
          )
        )
      )
      .payAssets(
        Address.fromBech32(
          "addr1qyw3cxrdt0pzadtqxhphudc0phxzcvqw3e0slfr2d07a4xdq8hj5am754jhsusxarj55n77d9an937ts8j84nj5k3fmqddwtss"
        ),
        value.makeValue(29_950_000n)
      )
      .payAssets(
        Address.fromBech32(
          "addr1q94ya68fuwgnk22jkmmf7enlm3r3sn64mj6033nceavmnhjeruhnmtslfjgufmwwtvn2jwkztvlcz03yttqemw2ajzysscv93x"
        ),
        value.makeValue(557_070_000n)
      )
      .complete();

    // TODO: Double check that this is accurate.
    expect(tx.body().fee().toString()).toEqual("287643");
  });

  // The following test is based on the below transaction, which was a transaction built by JPG Store. It created a fee that was too small.
  // 84a50082825820f4646e385964a642bee6ced21115ee6560cb6d7d99302db89319013a0b5e641900825820245202665911774b64bd1941f33abd23bcedd7918ccfa141c2c911810df1454400018283583931c727443d77df6cff95dca383994f4c3024d03ff56b02ecc22b0f3f652c967f4bd28944b06462e13c5e3f5d5fa6e03f8567569438cd833e6d821a00151c56a1581cccb2b25e5fd18224ea931a3812e5888716d9c08cd8871ff0ab3dc2faa1581a456d706f7761466f756e64696e67436f6d6d756e697479383333015820440f5b899c44c58bfd73c3283e8d72601ac39e178f854c2d52a80f9ef6ab2bec825839011c899db8a0539f39dc408fa8b1d09c29d214504ad57f10d7c355f90372b3acda54e7e9f23a683f519eda1286afc43ad1203a4e6204ceb5a71a3a0cc5e8021a0002dc15031a085de5fd0758205fa5ee64ef9dce3fbbb9e35c3eab5244c445d60364ef6993fbfc3a544eb24c03a0f5a5181e61361832784064383739396639666438373939666438373939666438373939663538316331633839396462386130353339663339646334303866613862316430396332396432183378403134353034616435376631306437633335356639303366666438373939666438373939666438373939663538316337326233616364613534653765396632336118347840363833663531396564613132383661666334336164313230336134653632303463656235613766666666666666663161316139336534653066666666353831631835783b316338393964623861303533396633396463343038666138623164303963323964323134353034616435376631306437633335356639303366662c

  it("should correctly calculate fee without script", async () => {
    const outputAddress = Address.fromBech32(
      "addr1qywgn8dc5pfe7wwugz863vwsns5ay9zsft2h7yxhcd2ljqmjkwkd5488a8er56pl2x0d5y5x4lzr45fq8f8xypxwkknss5gs29"
    );
    const jpgAddress = Address.fromBech32(
      "addr1x8rjw3pawl0kelu4mj3c8x20fsczf5pl744s9mxz9v8n7efvjel5h55fgjcxgchp830r7h2l5msrlpt8262r3nvr8ekstg4qrx"
    );

    const utxos = [
      new TransactionUnspentOutput(
        new TransactionInput(
          TransactionId(
            "F4646E385964A642BEE6CED21115EE6560CB6D7D99302DB89319013A0B5E6419"
          ),
          0n
        ),
        new TransactionOutput(
          Address.fromBech32(
            "addr1qxjdqrhk950rdmtfrpy09rlwlm3hpg9jnvd66ahwt6nkdhmjkwkd5488a8er56pl2x0d5y5x4lzr45fq8f8xypxwkknstgmy7e"
          ),
          value.makeValue(2_000_000n, [
            "ccb2b25e5fd18224ea931a3812e5888716d9c08cd8871ff0ab3dc2fa456d706f7761466f756e64696e67436f6d6d756e697479383333",
            1n,
          ])
        )
      ),
      new TransactionUnspentOutput(
        new TransactionInput(
          TransactionId(
            "245202665911774b64bd1941f33abd23bcedd7918ccfa141c2c911810df14544"
          ),
          0n
        ),
        new TransactionOutput(
          Address.fromBech32(
            "addr1qxzvpmq475jnhxjvgjjmwy0zd5z6j0ueucaqaq46vv4gznmjkwkd5488a8er56pl2x0d5y5x4lzr45fq8f8xypxwkkns5mspfr"
          ),
          value.makeValue(973486547n)
        )
      ),
    ];

    const metadata: Map<bigint, string> = new Map();
    metadata.set(30n, "6");
    metadata.set(
      50n,
      "d8799f9fd8799fd8799fd8799f581c1c899db8a0539f39dc408fa8b1d09c29d2"
    );
    metadata.set(
      51n,
      "14504ad57f10d7c355f903ffd8799fd8799fd8799f581c72b3acda54e7e9f23a"
    );
    metadata.set(
      52n,
      "683f519eda1286afc43ad1203a4e6204ceb5a7ffffffff1a1a93e4e0ffff581c"
    );
    metadata.set(
      53n,
      "1c899db8a0539f39dc408fa8b1d09c29d214504ad57f10d7c355f903ff,"
    );

    const tx = await new TxBuilder(hardCodedProtocolParams)
      .addUnspentOutputs(utxos)
      .lockAssets(
        jpgAddress,
        value.makeValue(1_383_510n, [
          "ccb2b25e5fd18224ea931a3812e5888716d9c08cd8871ff0ab3dc2fa456d706f7761466f756e64696e67436f6d6d756e697479383333",
          1n,
        ]),
        Datum.newDataHash(
          DatumHash(
            "440F5B899C44C58BFD73C3283E8D72601AC39E178F854C2D52A80F9EF6AB2BEC"
          )
        ) as unknown as Datum // TODO: why is this type assertion necessary?
      )
      .setChangeAddress(outputAddress)
      .setNetworkId(NetworkId.Mainnet)
      .setAuxiliaryData(
        AuxiliaryData.fromCore({
          blob: metadata,
        })
      )
      .setValidUntil(Slot(180371453))
      .complete();

    expect(tx.body().fee().toString()).toEqual("192121");
  });

  // Based on this tx
  
  //
  it("should correctly calculate fee with script", async () => {
    const outputAddress = Address.fromBech32(
      "addr1q8mpfcjzwazh5pdu39e09mf4ndqzt85uugsj59d6s6mnd69m7pw7h73a5k7m97qr744v00krq4m8750lfr08v8v6d36s3kthsj"
    );
    const jpgBuysellAddress = Address.fromBech32(
      "addr1w999n67e86jn6xal07pzxtrmqynspgx0fwmcmpua4wc6yzsxpljz3"
    );
    const jpgAskAddress = Address.fromBech32(
      "addr1x8rjw3pawl0kelu4mj3c8x20fsczf5pl744s9mxz9v8n7efvjel5h55fgjcxgchp830r7h2l5msrlpt8262r3nvr8ekstg4qrx"
    );
    const inputAddress = Address.fromBech32(
      "addr1q8mpfcjzwazh5pdu39e09mf4ndqzt85uugsj59d6s6mnd69m7pw7h73a5k7m97qr744v00krq4m8750lfr08v8v6d36s3kthsj"
    );

    const utxos = [
      new TransactionUnspentOutput(
        new TransactionInput(
          TransactionId(
            "3a6e908226c3e85d05c9ab76d38786ed7ba84cd920dd320baea85964e17d921c"
          ),
          1n
        ),

        new TransactionOutput(inputAddress, value.makeValue(1_838_524_343n))
      ),
    ];

    const jpgBuySellScript = Script.newPlutusV1Script(
      PlutusV1Script.fromCbor(
        HexBlob(
          ""
        )
      )
    );
    const params = { ...hardCodedProtocolParams };
    const jpgOutput = new TransactionOutput(
      jpgBuysellAddress,
      value.makeValue(1_724_100n, [
        "1234b07cb890b0227e18fc488888164a57cb7fa108e392a1c7b77f1c4d6f6e6b657941444134333430",
        1n,
      ])
    );
    jpgOutput.setDatum(
      Datum.newDataHash(
        DatumHash(
          "5e4b6116a37f03d5ef02d3debc1c0fc9743ee8f95093a10fb1edb6f09bd8ede4"
        )
      )
    );
    const jpgUtxo = new TransactionUnspentOutput(
      new TransactionInput(
        TransactionId(
          "7f11d088de6c214c25dbeff5a98ef5cb4f34741c062ead606859bee58ae0794d"
        ),
        0n
      ),

      jpgOutput
    );
    const redeemer = PlutusData.fromCbor(HexBlob("d87a80"));
    const datum = PlutusData.fromCbor(
      HexBlob(
        "d8799f581c95421e43490410b5d6cb305ccfbc6496b63852aa03542c704c03849a1a0ee6b280581c1234b07cb890b0227e18fc488888164a57cb7fa108e392a1c7b77f1c4d4d6f6e6b657941444134333430581c535596e9a0a7f6df85f6be951ed8971b92a4122f39c183d3994d0d391819ff"
      )
    );
    const collateralUtxo = new TransactionUnspentOutput(
      new TransactionInput(
        TransactionId(
          "69b685a7de3799cf778714ed2dee97dab7a983106caf75c9f752afc20399a29c"
        ),
        5n
      ),
      new TransactionOutput(inputAddress, value.makeValue(5_000_000n))
    );
    // This tx was built with base = 44
    if (params.minFeeReferenceScripts) params.minFeeReferenceScripts.base = 44;

    const auxData = new AuxiliaryData();
    const metadata = new Map<bigint, Metadatum>();
    metadata.set(30n, Metadatum.newText("6"));
    metadata.set(
      50n,
      Metadatum.newText(
        "d8799f9fd8799fd8799fd8799f581c535596e9a0a7f6df85f6be951ed8971b92"
      )
    );
    metadata.set(
      51n,
      Metadatum.newText(
        "a4122f39c183d3994d0d39ffd8799fd8799fd8799f581c745a380d2093d9b283"
      )
    );
    metadata.set(
      52n,
      Metadatum.newText(
        "6d3b258345a2cad8eb77a6a47465902309753effffffff1a000f4240ffd8799f"
      )
    );
    metadata.set(
      53n,
      Metadatum.newText(
        "d8799fd8799f581cf614e24277457a05bc8972f2ed359b40259e9ce2212a15ba"
      )
    );
    metadata.set(
      54n,
      Metadatum.newText(
        "86b736e8ffd8799fd8799fd8799f581cbbf05debfa3da5bdb2f803f56ac7bec3"
      )
    );
    metadata.set(
      55n,
      Metadatum.newText(
        "05767f51ff48de761d9a6c75ffffffff1a002dc6c0ffff581cf614e24277457a"
      )
    );
    metadata.set(
      56n,
      Metadatum.newText("05bc8972f2ed359b40259e9ce2212a15ba86b736e8ff,")
    );
    auxData.setMetadata(new Metadata(metadata));

    const tx = await new TxBuilder(hardCodedProtocolParams)
      .addUnspentOutputs(utxos)
      .provideCollateral([collateralUtxo])
      .useEvaluator(makeUplcEvaluator(params, 1, 1))
      .setChangeAddress(outputAddress)
      .setNetworkId(NetworkId.Mainnet)
      .addInput(jpgUtxo, redeemer, datum)
      .addRequiredSigner(
        Ed25519KeyHashHex(
          "95421e43490410b5d6cb305ccfbc6496b63852aa03542c704c03849a"
        )
      )
      .provideScript(jpgBuySellScript)
      .setValidUntil(Slot(140370206))
      .lockAssets(
        jpgAskAddress,
        value.makeValue(1323170n, [
          "1234b07cb890b0227e18fc488888164a57cb7fa108e392a1c7b77f1c4d6f6e6b657941444134333430",
          1n,
        ]),
        DatumHash(
          HexBlob(
            "7AE634387C2B9765E1E1D5A392A90B53A7A89F1336C3D12E0A97B62F38929EBF"
          )
        )
      )
      .setAuxiliaryData(auxData)
      .complete();

    // TODO: Ensure that this is accurate.
    expect(tx.body().fee().toString()).toEqual("473990");
  });

  it("should not use coin selection when set to false", async () => {
    // $hosky
    const testAddress = Address.fromBech32(
      "addr1q86ylp637q7hv7a9r387nz8d9zdhem2v06pjyg75fvcmen3rg8t4q3f80r56p93xqzhcup0w7e5heq7lnayjzqau3dfs7yrls5"
    );
    const tx = new TxBuilder(hardCodedProtocolParams)
      .setNetworkId(NetworkId.Testnet)
      .setChangeAddress(testAddress)
      .addWithdrawal(
        RewardAccount.fromCredential(
          testAddress.getProps().paymentPart!,
          NetworkId.Testnet
        ),
        100_000_000n
      )
      .addInput(
        new TransactionUnspentOutput(
          new TransactionInput(
            TransactionId(
              "7f11d088de6c214c25dbeff5a98ef5cb4f34741c062ead606859bee58ae0794d"
            ),
            0n
          ),
          new TransactionOutput(testAddress, value.makeValue(1_000_000n))
        )
      )
      .payAssets(testAddress, value.makeValue(48_708_900n));

    try {
      await tx.complete({ useCoinSelection: false });
    } catch (e) {
      expect((e as Error).message).toEqual(
        "Change output has more than inputs provide. Missing coin: 49840323. Missing multiassets: undefined"
      );
    }

    tx.addInput(
      new TransactionUnspentOutput(
        new TransactionInput(TransactionId("0".repeat(64)), 0n),
        new TransactionOutput(testAddress, value.makeValue(50_000_000n))
      )
    );

    const txComplete = await tx.complete({ useCoinSelection: false });
    expect(txComplete.body().inputs().values().length).toEqual(2);
    expect(txComplete.body().outputs().length).toEqual(2);
  });

  it("should correctly build a transaction when deregistering stake from a payment credential", async () => {
    const testAddress = Address.fromBech32(
      "addr1q86ylp637q7hv7a9r387nz8d9zdhem2v06pjyg75fvcmen3rg8t4q3f80r56p93xqzhcup0w7e5heq7lnayjzqau3dfs7yrls5"
    );

    const credential = Credential.fromCore({
      hash: testAddress.getProps().paymentPart!.hash,
      type: CredentialType.KeyHash,
    });

    const tx = await new TxBuilder(hardCodedProtocolParams)
      .setNetworkId(NetworkId.Testnet)
      .setChangeAddress(testAddress)
      .addUnspentOutputs([
        new TransactionUnspentOutput(
          new TransactionInput(TransactionId("0".repeat(64)), 0n),
          new TransactionOutput(testAddress, value.makeValue(50_000_000n))
        ),
      ])
      .addDeregisterStake(credential)
      .complete();

    expect(tx.toCbor()).toEqual(
      "84a400d9010281825820000000000000000000000000000000000000000000000000000000000000000000018182583901f44f8751f03d767ba51c4fe988ed289b7ced4c7e832223d44b31bcce2341d750452778e9a0962600af8e05eef6697c83df9f492103bc8b531a0316e8ab021a00028c5504d901028182018200581cf44f8751f03d767ba51c4fe988ed289b7ced4c7e832223d44b31bccea0f5f6"
    );
  });

  it("should correctly build a transaction when deregistering stake from a script credential", async () => {
    const testAddress = Address.fromBech32(
      "addr1q86ylp637q7hv7a9r387nz8d9zdhem2v06pjyg75fvcmen3rg8t4q3f80r56p93xqzhcup0w7e5heq7lnayjzqau3dfs7yrls5"
    );

    const alwaysTrueScript = Script.newPlutusV2Script(
      new PlutusV2Script(HexBlob("510100003222253330044a229309b2b2b9a1"))
    );

    const credential = Credential.fromCore({
      hash: alwaysTrueScript.hash(),
      type: CredentialType.ScriptHash,
    });

    const tx = await new TxBuilder(hardCodedProtocolParams)
      .useEvaluator(makeUplcEvaluator(hardCodedProtocolParams, 1, 1))
      .setNetworkId(NetworkId.Testnet)
      .setChangeAddress(testAddress)
      .addUnspentOutputs([
        new TransactionUnspentOutput(
          new TransactionInput(TransactionId("0".repeat(64)), 0n),
          new TransactionOutput(testAddress, value.makeValue(50_000_000n))
        ),
      ])
      .provideScript(alwaysTrueScript)
      .addDeregisterStake(credential, Data.void())
      .complete();

    expect(tx.toCbor()).toEqual(
      "84a800d9010281825820000000000000000000000000000000000000000000000000000000000000000000018182583901f44f8751f03d767ba51c4fe988ed289b7ced4c7e832223d44b31bcce2341d750452778e9a0962600af8e05eef6697c83df9f492103bc8b531a0316b655021a0002beab04d901028182018201581c39c520d0627aafa728f7e4dd10142b77c257813c36f57e2cb88f72a50b5820897a7518496ae87c5925439e33b42d39252da54e79291aea2c831f3012e3564b0dd90102818258200000000000000000000000000000000000000000000000000000000000000000001082583901f44f8751f03d767ba51c4fe988ed289b7ced4c7e832223d44b31bcce2341d750452778e9a0962600af8e05eef6697c83df9f492103bc8b531a02f6d27f111a00041e01a205a182020082d87980821904b01a0002afe406d901028152510100003222253330044a229309b2b2b9a1f5f6"
    );
  });

  it("should build a transaction correctly when including a donation to the treasury", async () => {
    // $hosky
    const testAddress = Address.fromBech32(
      "addr1q86ylp637q7hv7a9r387nz8d9zdhem2v06pjyg75fvcmen3rg8t4q3f80r56p93xqzhcup0w7e5heq7lnayjzqau3dfs7yrls5"
    );
    const tx = new TxBuilder(hardCodedProtocolParams)
      .setNetworkId(NetworkId.Testnet)
      .setChangeAddress(testAddress)
      .addUnspentOutputs([
        new TransactionUnspentOutput(
          new TransactionInput(
            TransactionId(
              "7f11d088de6c214c25dbeff5a98ef5cb4f34741c062ead606859bee58ae0794d"
            ),
            0n
          ),
          new TransactionOutput(testAddress, value.makeValue(1_000_000n))
        ),
        new TransactionUnspentOutput(
          new TransactionInput(TransactionId("0".repeat(64)), 0n),
          new TransactionOutput(testAddress, value.makeValue(50_000_000n))
        ),
      ])
      .payAssets(testAddress, value.makeValue(48_708_900n))
      .setDonation(1_000_000n);

    const txComplete = await tx.complete();
    expect(txComplete.toCbor()).toEqual(
      "84a400d90102828258200000000000000000000000000000000000000000000000000000000000000000008258207f11d088de6c214c25dbeff5a98ef5cb4f34741c062ead606859bee58ae0794d00018282583901f44f8751f03d767ba51c4fe988ed289b7ced4c7e832223d44b31bcce2341d750452778e9a0962600af8e05eef6697c83df9f492103bc8b531a02e73d2482583901f44f8751f03d767ba51c4fe988ed289b7ced4c7e832223d44b31bcce2341d750452778e9a0962600af8e05eef6697c83df9f492103bc8b531a00111b57021a00029805161a000f4240a0f5f6"
    );
  });

  // Pulled from real-world UTXO: https://cexplorer.io/tx/f0ec51fbcd22738f58803f855775e3544cbce8cfe9200e364290e20a544d96ad
  it("should prepare collateral correctly with low ada and lots of nfts when spending a script input", async () => {
    const usersPosition = Transaction.fromCbor(
      TxCBOR(
        ""
      )
    );

    const usersPositionOutput = usersPosition
      .body()
      .outputs()[0] as TransactionOutput;

    const positionUtxo = TransactionUnspentOutput.fromCore([
      {
        index: 0,
        txId: TransactionId(
          "f1eeae5d97d171913296117859ab801657a96321245c84ff4a4f33ebd4217508"
        ),
      },
      usersPositionOutput.toCore(),
    ]);

    const usersWallet = Transaction.fromCbor(
      TxCBOR(
        "84a400d90102828258208286e6132af7019ea6232417affbc4256ceea1c6ca5be80355a468793a0eda6600825820c97be6f9fa702f69afa829ebbc98c2b557c97ecacb40a65cd2d66ed5c79776c601018482581d61c0cb190bf8f99d51bd6e08939256ff9b42becb7e3fe01cfa8eb4d4c11a004c4b4082583901228938ca5b3f5c0ed1ddb1408f8ac86a8efed099bdf124f15cba2805cf2eac496d909a41916f955f1ab064e00edb8cbe12f5817ec89db7d91a001e848082583901228938ca5b3f5c0ed1ddb1408f8ac86a8efed099bdf124f15cba2805cf2eac496d909a41916f955f1ab064e00edb8cbe12f5817ec89db7d9821a00b5b5b2b82e581c016be5325fd988fea98ad422fcfd53e5352cacfced5c106a932a35a4a14342544e1a0003cd9e581c10a49b996e2402269af553a8a96fb8eb90d79e9eca79e2b4223057b6a1444745524f1a06c9f9e0581c13057a460cfd6c33952483d18f09d83a5eba3537ad4250a2c6587f0aa144424c55451a00017337581c160a880d9fc45380737cb7e57ff859763230aab28b3ef6a84007bfcca1444d495241192904581c16fdd33c86af604e837ae57d79d5f0f1156406086db5f16afb3fcf51a14544474f4c441a62590080581c1774343241680e4daef7cbfe3536fc857ce23fb66cd0b66320b2e3dda1454249534f4e1a01312cfe581c1a71dc14baa0b4fcfb34464adc6656d0e562571e2ac1bc990c9ce5f6a144574f4c461b00000002d1e0e3c4581c1d7f33bd23d85e1a25d87d86fac4f199c3197a2f7afeb662a0f34e1ea150776f726c646d6f62696c65746f6b656e1a000d6ed2581c1f4b1b277c9c001c1522727506a2cfb401a0d0ade069b0241f16f07da14248491a001e8480581c279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3fa144534e454b18a0581c29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c6a1434d494e1a0002fc0e581c2afb448ef716bfbed1dcb676102194c3009bee5399e93b90def9db6aa1454249534f4e1a00a7d8be581c2d7444cf9e317a12e3eb72bf424fd2a0c8fbafedf10e20bfdb4ad8aba1464348454444411a00061a7e581c3b31e746a68c5bef72c0fb9f2185e6b1fad0ea2faaccfeeb275afe91a14552454143481a0b626dc0581c3d77d63dfa6033be98021417e08e3368cc80e67f8d7afa196aaa0b39a14c53746172636820546f6b656e1a00027100581c420000029ad9527271b1b1e3c27ee065c18df70a4a4cfc3093a41a44a14341584f1a02a1c078581c438514ae1beb020d35e5389993447cea29637d6272c918017988ef36a1484164615969656c641b0000000165a0bc00581c51a5e236c4de3af2b8020442e2a26f454fda3b04cb621c1294a0ef34a144424f4f4b1a00b5baf8581c547ceed647f57e64dc40a29b16be4f36b0d38b5aa3cd7afb286fc094a1476262486f736b791903e6581c577f0b1342f8f8f4aed3388b80a8535812950c7a892495c0ecdf0f1ea1480014df10464c44541844581c59515c449f1ec1d21a4b2d93013337d13b29d74c3a665a11d5b7fc66a14544534c56521b0000000df8475800581c5eee9c6e9cc2701d1af66b3370a108472f0e173e5e70c6c7a0af58f9a24b4372797374616c31303730014b4372797374616c3734303301581c641f0571d02b45b868ac1c479fc8118c5be6744ec3d2c5e13bd888b6a1465a4f4d424945190bb6581c682fe60c9918842b3323c43b5144bc3d52a23bd2fb81345560d73f63a1444e45574d1a02faf080581c6cc5da99ec107947f922e81038b2f5accba43b76d2b1f515673a8c24a24e437261796f6e4372657735343936014e437261796f6e437265773536323201581c8434cc23a47cfa0d68d729b480169bfa3f910310a8184f43cfbcc02ca1470014df104c54591a000aaffa581c8483844875ce4d61c2aa459240f277d32081ee08fe0ad16899a0f581a1490014df10544954414e1b0000000110c7035c581c8d0ae3c5b13b47907b16511a540d47436d12dcc96453c0f59089b451a14542524f4f4d1a00497791581c8e1d94b7ac5db949a55720f054534b55b66f9a1f7d5a8a2132427369a14756643476674e4102581c96ad5ab136d2193dda2afb662285b93e48d265e14df59ee0f33925aea1444447454d1a01e0a6e0581c9cb29862cdce7cc8a5eff4b3634d3afa7c8241b04fc4839a372d448aa14953757065724475636b1a058675c8581ca0028f350aaabe0545fdcb56b039bfb08e4bb4d8c4d7c3c7d481c235a145484f534b591a0605887d581caf2e27f580f7f08e93190a81f72462f153026d06450924726645891ba144445249501a7d49264f581cafc910d7a306d20c12903979d4935ae4307241d03245743548e76783a14541534849421b000000030236127e581cb06729158210bf1ba13f8f3d7d422a918d3eaa82561a705552a2568ba1581a4d656c642042616e6b204d616e6167657220763120323233343801581cb2b2efec2dd5923e8e70bdc77cf40f41aafc6676cfa752f37f2ec6fbb81e4e44454741456c656d656e74313632014e44454741456c656d656e74313635014e44454741456c656d656e74313637014e44454741456c656d656e74313638014e44454741456c656d656e74313639014e44454741456c656d656e74313735014e44454741456c656d656e74333331014e44454741456c656d656e74333332014e44454741456c656d656e74333336014e44454741456c656d656e74333337014e44454741456c656d656e74333338014e44454741456c656d656e74333339014e44454741456c656d656e74333430014e44454741456c656d656e74333431014e44454741456c656d656e74333432014e44454741456c656d656e74333433014e44454741456c656d656e74333435014f44454741456c656d656e7431393834014f44454741456c656d656e7432313835014f44454741456c656d656e7432323431014f44454741456c656d656e7432323531014f44454741456c656d656e7432323536014f44454741456c656d656e7432323635014f44454741456c656d656e7432333334014f44454741456c656d656e7432333335014f44454741456c656d656e7432333336014f44454741456c656d656e7432333337014f44454741456c656d656e7432343030014f44454741456c656d656e7432343031014f44454741456c656d656e743234303401581cb788fbee71a32d2efc5ee7d151f3917d99160f78fb1e41a1bbf80d8fa1494c454146544f4b454e1a505aca47581cd030b626219d81673bd32932d2245e0c71ae5193281f971022b23a78a148436172646f67656f1904ec581cdb30c7905f598ed0154de14f970de0f61f0cb3943ed82c891968480aa144434c41501a000445c0581cea153b5d4864af15a1079a94a0e2486d6376fa28aafad272d15b243aa14a0014df105368617264731a006acfc0581cf43a62fdc3965df486de8a0d32fe800963589c41b38946602a0dc535a144414749581a00823080581cf5f8e854af532d828d00381df799ba6db22d825c9b140e1d5795cf85a14e0014df10447261676f6e476f6c641a545eee57581cf6ac48c64aa7af16434d9f84e014d11fba38525b436acc338ff20b0da1434d74630b581cfbae99b8679369079a7f6f0da14a2cf1c2d6bfd3afdf3a96a64ab67aa1490014df1047454e53581a00075818581cfd5a192b76cb73f004edde3993c31f8846845d858fa29a19b8a19869a14348594e1a00512570581cfed1c459a47cbff56bd7d29c2dde0de3e9bd15cee02b98622fce82f7a24d43617264616e6f436f707065721a05f5e1004d43617264616e6f53696c7665721a000f424082583901228938ca5b3f5c0ed1ddb1408f8ac86a8efed099bdf124f15cba2805cf2eac496d909a41916f955f1ab064e00edb8cbe12f5817ec89db7d91a002956ef021a00046fd1031a09042451a100d9010282825820ac44f0fbf784df0e261bcfdc77a722c00ee88938a38c0d68c2700822fdbbbdd558400d4e24cff1c6aa5095065a0eb2656aaf0587fdd1243fab4d42168647e0364a551f486a6995d573467a1f55f75683de8b89c220f2548acf2548e7b8bba08fb40c8258207cfc00ab4d76508db024d1ce09b118c6baa31856be439b1a29a352710d113a7c584056d6c32497939eee6eab40d57e9fcc0e2730ac628af1d3257ca6974ab068e5e689b7836bd44ed2bb6ae1cc15eed5a20e6d6e71d8da532a7fa0cfff6d41de1808f5f6"
      )
    );

    const usersWalletOutput = usersWallet
      .body()
      .outputs()[2] as TransactionOutput;
    const userUtxo = TransactionUnspentOutput.fromCore([
      {
        index: 1,
        txId: TransactionId(
          "f0ec51fbcd22738f58803f855775e3544cbce8cfe9200e364290e20a544d96ad"
        ),
      },
      usersWalletOutput.toCore(),
    ]);

    const refTx = Transaction.fromCbor(
      TxCBOR(
        "84a30081825820c06db939721d1537a7cb126846ba2de765dcb293f2ed1f8a45ae69844c2911b9000182a3005839016bb14aa14473d5398e74057fcbee366f553167938d670bb993ce53423c65a71bf205c0a9f847cca9fad1d560ffb50505080de08064057c35011a0072b1e003d8185905e782025905e25905df0100003232323232323232323232222325333009333323232323232323232300100122223253330163370e900000089919198070028009bae301c0013014004153330163370e90010008991919806000919998040040008030029bac301c0013014004153330163370e90020008991919804000919998040040008030029bac301c0013014004153330163370e900300089919191919b8900333300c00148000894ccc070cccc02c02c0080240204cdc0000a400420026eb0c078004c078008dd6980e000980a0020a99980b19b87480200044c8c8c8c94ccc068cdc3a400400226464a66603866e1d2002301e3754660306034660306034010900124004266e240040144cdc40008029bad3020001301800214a0603000266028602c66028602c0089001240006eb4c070004c0500104c8c8c8c94ccc068cdc3a400400226464a66603866e1d2002301e3754660306034660306034010900024004266e240140044cdc40028009bad3020001301800214a0603000266028602c66028602c0089000240006eb4c070004c050010c05000cc0040048894ccc05800852809919299980a18018010a51133300500500100330190033017002300100122225333015003100213232333300600600133003002004003301800430160033001001222533301200214a226464a6660206006004266600a00a0020062940c05400cc04c008c0040048894ccc04000852809919299980719b8f00200314a2266600a00a00200660260066eb8c044008cc014c01c005200037586600a600e6600a600e0049000240206600a600e6600a600e00490002401c2930b19002199191919119299980719b87480000044c8c8c8c94ccc058c0600084c926300700315330134901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301600130160023014001300c002153300f4912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300c00130010012232533300d3370e9000000899192999809980a8010a4c2a66020921334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602600260160042a66601a66e1d20020011323253330133015002132498cc0180048c9263300600600115330104901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163758602600260160042a66601a66e1d20040011323253330133015002132498cc0180048c9263300600600115330104901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163758602600260160042a66601a66e1d200600113232323253330153017002132498cc0200048c9263300800800115330124901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163758602a002602a0046eb4c04c004c02c00854ccc034cdc3a401000226464a666026602a0042930a99808249334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a602600260160042a66601a66e1d200a0011323253330133015002149854cc0412401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a602600260160042a6601c9212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300b0013001001222533300f00214984c8ccc010010c04800c008c004c04000800ccc0040052000222233330073370e0020060184666600a00a66e000112002300e001002002230063754002460086ea80055cd2b9c5573aaae7955cfaba157441825839016bb14aa14473d5398e74057fcbee366f553167938d670bb993ce53423c65a71bf205c0a9f847cca9fad1d560ffb50505080de08064057c351a1d571d97021a00039589a10081825820d6a1079f0b3149edc032cb7d55c8733689cd3b7227e6de23cde60e41e83716f95840db7ae55855623d3f9ea05c5c1dc61d33eb9c3123d6eb7bb5eef9d5ccf1e79abd870ec5e5de8082f4b26efc3c57da6c17236654295f6617765b7bd59931c72e0df5f6"
      )
    );
    const refOutput = refTx.body().outputs()[0] as TransactionOutput;
    const refUtxo = TransactionUnspentOutput.fromCore([
      {
        index: 0,
        txId: TransactionId(
          "5af2bc2b1c983f65122d8737755d1de6e88c4d24797fdfac2c01e5156c15256f"
        ),
      },
      refOutput.toCore(),
    ]);

    const txBuilder = new TxBuilder(hardCodedProtocolParams);
    txBuilder.setNetworkId(NetworkId.Mainnet);

    const tx = await txBuilder
      .useEvaluator(makeUplcEvaluator(hardCodedProtocolParams, 1, 1))
      .setChangeAddress(positionUtxo.output().address())
      .addRequiredSigner(
        Ed25519KeyHashHex(
          "c0cb190bf8f99d51bd6e08939256ff9b42becb7e3fe01cfa8eb4d4c1"
        )
      )
      .addRequiredSigner(
        Ed25519KeyHashHex(
          "cf2eac496d909a41916f955f1ab064e00edb8cbe12f5817ec89db7d9"
        )
      )
      .addUnspentOutputs([positionUtxo, userUtxo])
      .addReferenceInput(refUtxo)
      .addInput(positionUtxo, PlutusData.fromCbor(HexBlob("d87a80")))
      .complete();

    console.log(tx.toCbor());
  });
});
